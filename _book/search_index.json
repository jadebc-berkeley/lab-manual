[
["unix.html", "Chapter 9 Unix commands 9.1 Basics 9.2 Syntax for both Mac/Windows 9.3 Basics 9.4 Running scripts 9.5 Checking tasks and killing jobs", " Chapter 9 Unix commands by Stephanie Djajadi and Kunal Mishra We typically use Unix commands in Terminal (for Mac users) or Git Bash (for Windows users) to Run a series of scripts in parallel or in a specific order to reproduce our work To check on the progress of a batch of jobs To use git and push to github 9.1 Basics On the computer, there is a desktop with two folders, folder1 and folder2, and a file called file1. Inside folder1, we have a file called file2. Mac users can run these commands on their terminal; it is recommended that Windows users use Git Bash, not Windows PowerShell. Stephanie please add your figure then delete this 9.2 Syntax for both Mac/Windows When typing in directories or file names, quotes are necessary if the name includes spaces. Stephanie please add your table and figure then delete this 9.3 Basics Stephanie please add your table then delete this 9.4 Running scripts Stephanie please reformat below Rscript file.R R CMD BATCH file.R # output will be in a new file called file.Rout cat file.Rout # check output http://datacornering.com/how-to-run-r-scripts-from-the-windows-command-line-cmd/ https://happygitwithr.com/shell.html 9.5 Checking tasks and killing jobs Stephanie please add your table then delete this For big data workflows, the concept of “backgrounding” a Bash script allows you to start a “job” (i.e. run the script) and leave it overnight to run. At the top level, a bash script (0-run-project.sh) that simply calls the directory-level bash scripts (i.e. 0-prep-data.sh, 0-run-analysis.sh, 0-run-figures.sh, etc.) is a powerful tool to rerun every script in your project. See the included example bash scripts for more details. Running Bash Scripts in Background: Running a long bash script is not trivial. Normally you would run a bash script by opening a terminal and typing something like ./run-project.sh. But what if you leave your computer, log out of your server, or close the terminal? Normally, the bash script will exit and fail to complete. To run it in background, type ./run-project.sh &amp;; disown. You can see the job running (and CPU utilization) with the command top and check your memory with free -h. Deleting Previously Computed Results: One helpful lesson we’ve learned is that your bash scripts should remove previous results (computed and saved by scripts run at a previous time) so that you never mix results from one run with a previous run. This can happen when an R script errors out before saving its result, and can be difficult to catch because your previously saved result exists (leading you to believe everything ran correctly). Ensuring Things Ran Correctly: You should check the .Rout files generated by the R scripts run by your bash scripts for errors once things are run. A utility file is include in this repository, called runFileSaveLogs, and is used by the example bash scripts to… run files and save the generated logs. It is an awesome utility and one I definitely recommend using. For help and documentation, you can use the command ./runFileSaveLogs -h. "]
]
